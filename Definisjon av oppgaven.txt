# Bacheloroppgave om Scalable Vector Graphics (SVG) #

## Abstract ##
 - Kort hva oppgaven går ut på
 - Hvorfor valgte vi denne oppgaven

## Problemstilling ##

Vi ønsker å lage et java-bibliotek som tar forsjellige typer inn-data 
og generer forsjellige typer grafer i SVG-format. Dette er veldig likt 
hva regneark kan gjøre med sine graf-komponenter. Vi ønsker å gi den 
samme muligheten til applikasjoner for web. Vi skal ha støtte for flere 
graftyper, blant annet linje, kake, streker og punkter. For å gjøre 
det enklere for sluttbrukere å benytte java-biblioteket skal vi også 
kunne lese inn data fra strukturerte tekstfiler (CSV). I tillegg ønsker 
vi også å finne ut av om SVG fremdeles er den teknologien som 
anbefales for presentasjon av skalerbar grafikk på World Wide Web, 
eller om det er kommet nye teknologier på markedet som prøver å 
sidestille SVG som standard. 

## Valg av verktøy ##

 - Eclipse 3.x
 - Tomcat webapplication server
 - J2SE 1.5
 - Batik SVG toolkit
 - Git revision control system
 - Github.com repository
 - Liquidplanner.com project management tool

Vi velger å benytte oss av Eclipse på grunn av tidligere erfaring 
under utdanningsløpet. Siden vi har planlagt å lage en web applikasjon 
trenger vi også en servlet kontainer og det er da naturlig å bruke 
apache sin tomcat siden denne er integrert i eclipse. Vi har ingen 
planer om å begrense applikasjonen til kun å virke i tomcat men 
støtter alle de tradisjonelle servlet kontainerne. Vi velger å benytte 
JS2SE 1.5 og kompilere alle komponenter under denne standarden. Dette 
gir oss økt kompabilitet med eldre Mac installasjoner som ikke har 
støtte for J2SE 1.6. Vi kommer mest sannsynlig til å bruke Batik SVG 
toolkit for å slippe reimplementasjon av hele SVG standarden, noe Batik 
ser ut til å gjøre svært godt. For å kordinere oppgavene velger vi 
å bruke liquidplanner.com(LP) som er et svært godt 
planleggingsverktøy som er gratis tilgjenglig for akademisk bruk. LP er 
svært godt egnet til en smidig utviklingsmetodikk(Agile). Valget på 
Git benytter vi fordi det gir god støtte for desentralisert utvikling. 
Den har også enkel støtte for branching (forgrening av kodebasen), som 
gjør det lett å jobbe på flere separate idéer samtidig. Github er en 
tjeneste som tillater hosting av git kildekodesamlinger(repositories) og 
det er gratis for åpnekildekode prosjekter. Vi velger å 
tilgjengeliggjøre vårt prosjekt som åpenkildekode fra dag en. 
Prosjektet vil bli lisensiert under BSD lisensen, som også gjør det 
mulig å bruke komponentene kommersielt. En av grunnene til å bruke 
Github er at den har et godt system for å integrere andre utviklere som 
kanskje ønsker å hjelpe til med utvikling i fremtiden. 

## Arbeidsmetodikk ##

Vi vil bruke en smidig utviklingsmetodikk, hvor vi setter opp korte 
perioder (sprint), hvor vi jobber på spesifikke problemstillinger. 
Idéen med smidig utvikling er at etter hver periode sitter man igjen 
med et system som virker med den funksjonaliteten som var planlagt for 
perioden. Hver periode begynner med en planleggingsrunde over hva man 
skal ha med, og avsluttes med versjoner av applikasjon og bibliotek som 
kan benyttes slik de er. Vi setter opp til en felles dag i uken med 
arbeid i plenum og jobber hver for oss de resterende dagene. Vi kommer 
til å bruke 3 uker pr. periode. Oppgaver som ikke er utført i en 
periode på grunn av manglende tid vil bli overført til neste periode. 
Start og slutt på en periode legges til felles arbeidsdager i den 
gjeldende uken. All dokumentasjon av programvaren benytter engelsk som 
språk. Dette gjør det enklere for tredjeparter å evaluere koden i 
prosjektet uavhengig av norsk språkforståelse.

## Spørsmål som må besvares ##

 - Introduksjon: Hva er SVG?
 - Hvilke nettlesere må støtte SVG for at man som utvikler kan benytte SVG uten å tenke på klient-støtte?
   - Hvor mye av SVG-standarden støtter de forskjellige nettleserne?
     - Hvilke nettlesere støtter standarden i det hele tatt?
     - Er det noe spesifikk funksjonalitet i SVG-standarden som ikke er støttet?
     - Finnes det noen mangler eller andre svakheter i støtten av SVG-standarden i disse nettleserne, f.eks. feil implementasjon?
 - Hvorfor støtter ikke Microsoft Internet Explorer SVG-standarden?
   - Hvordan forholder Microsoft seg til W3C sin SVG-standard?
     - Har det synspunktet endret seg over tid?
   - Hvilke andre teknologier har Microsoft valgt å benytte isteden?
   - Hvilken innvirkning på markedet har Microsoft sitt synspunkt på adopsjon av SVG i sin helhet?
 - Hvilke alternative teknologier eksisterer som dekker SVG sin funksjonalitet?
   - Hvordan benytter utviklere Adobe Flash fordi SVG ikke er tilgjengelig?
   - Kan Microsoft SilverLight også benyttes for å omgå mangel på SVG-støtte?
   - Kan JavaScript-bibliotek som [Raphaël http://raphaeljs.com/] være et alternativ til SVG?
     - Hvordan skille Raphaël sin imparative fokus seg fra SVG sin deklarative fokus?   
   - Kunne VML (Vector Markup Lanuage), som Microsoft støtter, vært avansert som en global standard istedenfor SVG?
     - Finnes det proprietære elementer i VML som gjør den uskikket som en åpen standard?
     - Er VML som standard knyttet for sterkt til Microsoft sin implementasjon?
 - Konklusjon: Hva må skje i markedet for at SVG skal "ta av" som standard?
 
## Modellapplikasjon ##

### Java-bibliotek som skal ta input data og generere SVG ###

Vi skal lage et Java-bibliotek som gjør det mulig å generere SVG-filer 
basert på instanser med strukturerte data. Vi velger å benytte 
mønstre for god programdesign slik at biblioteket gjør det enkelt å 
utvide biblioteket til å støtte mer funksjonalitet på et senere 
tidspunkt. Vi planlegger å benytte white-box reuse-konseptet for å 
oppnå høy fleksibilitet.

### Tolk for å lese inn data fra fil ###

Vi planlegger å lage en tolk (eng:parser) som kan ta inndata i form av 
XML eller CSV (Comma Separated Values) og gjøre om dette til strukturer 
som SVG-generatoren kan benytte. Intensjonen er å gjøre det mulig å 
enkelt eksportere data fra et regneark (f.eks. Excel eller OpenOffice) 
som kan benyttes som inn-data til denne tolken. Poenget er å støtte 
det eksport-formatet som er enklest å generere for en sluttbruker av 
desktop-applikasjonen. Excel sitt "XML-regneark 2003"-format er f.eks. 
godt egnet som inndata. 

### Lage en skrivebordapplikasjon som kan bruke det overnevnte bibliotek ###

Her planlegger vi å lage en normal applikasjon som kan gi et 
grensesnitt til brukeren for å skrive inn data eller laste inn en fil 
for å fylle inn et datasett. Den skal igjen kunne generere SVG-filer 
basert på dette datasettet og åpne de i en nettleser. Applikasjonen 
skal detektere hvilke nettlesere brukeren har og gi en opsjon på 
hvilken man ønsker å benytte til presentasjon av SVG-filen. Hvis tiden 
strekker til vurderer vi og også legge inn støtte for å prosessere 
mange filer på en gang (eng:batch-conversion). Med et godt API for 
hvordan generere et datasett burde det være enkelt å utvide 
applikasjonen fra å håndtere kun en fil til å kunne håndtere mange 
filer på en gang. Vi planlegger å benytte mønstre for god programdesign
for å gjøre applikasjonen enkel å utvide og lettere å vedlikeholde. Dette
vil passe godt sammen med vårt valg om å benytte en smidig utviklingsmetodikk.


